package com.jollyclass.attence.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.xml.soap.Text;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.util.CellRangeAddress;

import com.jollyclass.attence.constant.StringUtils;
import com.jollyclass.attence.domain.Employee;

/**
 * 考勤类 将指纹机中的数据转换成表格，获得上下班状态
 * 
 * @author 邹丹丹
 *
 */
public class AttenceUtils {

	/**
	 * 创建和写入表格
	 * 
	 * @param readPath
	 *            考勤记录路径
	 * @param savePath
	 *            保存表格路径
	 * @param path
	 *            姓名列表的路径
	 * @param date
	 *            查询的日期
	 * @param queryName
	 *            查询的名称
	 * @param deptStr
	 *            查询的部门名称
	 * @return int类型，如果为0，则正常运行，如果为1，则姓名不存在，如果为2，则部门不存在，如果为3，则日期不存在。
	 */
	public static int createAttenceExcel(String readPath, String savePath, String path, String date, String queryName,
			String deptStr) {
		System.out.println("=====createAttenceExcel======");
		int index = 0;
		// 获得姓名数据
		String[] names = getDataFromName(path);
		List<String[]> sources = readAttenceSource(readPath);
		List<Employee> datas = getEmploeeDatas(sources, names);

		if (!isEmpty(queryName, StringUtils.NAME_FIELD)) {
			// 查询姓名是否存在；
			int flag = queryFromArray(datas, queryName);
			if (flag == 0) {
				index = 1;
				return index;
			}
		}
		if (!isEmpty(deptStr, StringUtils.DEPT_FIELD)) {
			// 查询部门是否存在
			int deptFlag = queryFromArray(datas, deptStr);
			if (deptFlag == 0) {
				index = 2;
				return index;
			}
		}
		if (!isEmpty(date, StringUtils.DATE_FIELD)) {
			// 查询日期是否存在
			int dateFlag = queryFromArray(datas, date);
			if (dateFlag == 0) {
				index = 3;
				return index;
			}
		}
		List<Employee> list = sortList(date, queryName, deptStr, datas);
		// 创建表
		String sheetName = savePath.substring(savePath.lastIndexOf("\\") + 1, savePath.lastIndexOf("."));
		
		if (!sheetName.endsWith("表")) {
			sheetName = sheetName.replace("表", "表\n");
		}
		HSSFWorkbook book = createBook(list, StringUtils.CONTENTS, sheetName, StringUtils.SHEET_NAME);
		// 写入表
		writeBook(book, savePath);
		// 查询和写入数据
		
		return index;
	}

	
	/**
	 * 根据姓名查询数据
	 * 
	 * @param datas
	 *            具体的数据
	 * @param queryName
	 *            查询的名称
	 * @param deptStr
	 *            查询的部门名称
	 * @param date
	 *            查询的日期
	 * @return list的数组集合
	 */
	private static List<Employee> queryDateByName(List<Employee> datas, String queryName, String deptStr, String date) {
		List<Employee> list = new ArrayList<Employee>();
		System.out.println("===============queryDateByName=================");
		// 判断queryname不能为空以及不能为默认的文本
		if (isEmpty(queryName, StringUtils.NAME_FIELD) && isEmpty(deptStr, StringUtils.DEPT_FIELD)
				&& isEmpty(date, StringUtils.DATE_FIELD)) {
			return datas;
		}
		// 查询相同的名称，相同是添加到list中
		for (Employee employee : datas) {
			if (!isEmpty(queryName, StringUtils.NAME_FIELD) && employee.getName().equals(queryName)) {
				System.out.println("姓名有填寫");
				// 判断部门，如果部门存在，则判断日期；若部门为空，也判断日期；若部门不存在，则跳转
				// 姓名+部门
				if (!isEmpty(deptStr, StringUtils.DEPT_FIELD) && !employee.getDeptName().equals(deptStr)) {
					System.out.println("部门不存在");
					continue;
				} else {
					// 若日期为空，则只找姓名内容，若日期不为空，但不存在，也查询储存，若日期存在，则查询储存
					if (!isEmpty(date, StringUtils.DATE_FIELD) && !employee.getAttenceDate().contains(date)) {
						System.out.println("日期不存在");
						continue;
					}
				}
				list.add(employee);
			} else if (isEmpty(queryName, StringUtils.NAME_FIELD)) {
				System.out.println("姓名沒有填寫");
				// 根据部门查找
				if (!isEmpty(deptStr, StringUtils.DEPT_FIELD) && employee.getDeptName().equals(deptStr)) {
					// 根据部门+日期查询，如果日期不存在，或者为空，则只按部门查询
					if (!isEmpty(date, StringUtils.DATE_FIELD) && !employee.getAttenceDate().contains(date)) {
						System.out.println("日期不存在");
						continue;
					}
					list.add(employee);
				} else if (isEmpty(deptStr, StringUtils.DEPT_FIELD)) {
					if (!isEmpty(date, StringUtils.DATE_FIELD) && !employee.getAttenceDate().contains(date)) {
						System.out.println("日期不存在");
						continue;
					}
					list.add(employee);
				} else {
					System.out.println("部门不存在");
					continue;
				}
			} else if (!employee.getName().equals(queryName)) {
				System.out.println("姓名不存在");
				continue;
			}
		}
		System.out.println("query list:" + list.size());
		return list;
	}

	/**
	 * 根据路径获取姓名列表 格式为1号xxx
	 * 
	 * @param path
	 *            姓名列表的路径
	 * @return 数组
	 */
	private static String[] getDataFromName(String path) {
		BufferedReader bufr = null;
		ArrayList<String> list = new ArrayList<String>();
		try {
			bufr = new BufferedReader(new InputStreamReader(new FileInputStream(path), StringUtils.ENCODE_FIELD));
			String len = null;
			while ((len = bufr.readLine()) != null) {
				if (len == null || len.equals("")) {
					continue;
				}
				System.out.println("len:" + len);
				list.add(len);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (bufr != null) {
				try {
					bufr.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		String[] arrs = new String[list.size()];
		return list.toArray(arrs);
	}

	/**
	 * 读取考勤记录 只去前面两个数据，一个代表员工指纹号，一个代表员工的打卡时间
	 * 
	 * @param string
	 *            考勤记录信息
	 * @return list的数组集合
	 */
	public static List<String[]> readAttenceSource(String string) {
		ArrayList<String[]> lists = new ArrayList<String[]>();
		BufferedReader bufr = null;
		try {
			bufr = new BufferedReader(new InputStreamReader(new FileInputStream(string)));
			String str = "";
			while ((str = bufr.readLine()) != null) {
				if (str == null || str.equals("")) {
					continue;
				}
				String[] targets = new String[2];
				String[] strs = str.split("	");
				strs[0] = strs[0].substring(strs[0].lastIndexOf(" ") + 1, strs[0].length());
				targets[0] = strs[0];
				targets[1] = strs[1];
				lists.add(targets);
			}
			System.out.println("readAttenceSource list:" + lists.size());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (bufr != null) {
				try {
					bufr.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return lists;
	}

	/**
	 * 转换考勤记录 将原始数据转换成表格模板的数据
	 * 
	 * @param sources
	 *            原始数据
	 * @param names
	 *            姓名列表
	 * @return list集合
	 */
	public static List<Employee> getEmploeeDatas(List<String[]> sources, String[] names) {
		System.out.println("=====getTargetDatas======");
		List<Employee> list = new ArrayList<Employee>();
		for (int i = 0; i < sources.size(); i++) {
			Employee employee = new Employee();
			String[] strings = sources.get(i);
			for (int j = 0; j < names.length; j++) {
				String name = names[j];
				String targetName = name.substring(name.indexOf(StringUtils.SPIT_HAO) + 1, name.indexOf("-"));
				String number = name.substring(0, name.indexOf(StringUtils.SPIT_HAO));
				String dept = name.substring(name.indexOf(StringUtils.SPIT_CONSE) + 1, name.length());
				if (strings[0].equals(number.trim())) {
					employee.setNo(strings[0]);
					employee.setName(targetName);
					employee.setDeptName(dept);
					String[] times = getSeconds(strings[1]);
					employee.setWeek(getweek(strings[1]));
					employee.setAttenceDate(strings[1].substring(0, strings[1].indexOf(" ")));
					employee.setAttenceTime(strings[1].substring(strings[1].indexOf(" ") + 1));
					employee.setFlag(times[0]);
					employee.setStatus(times[1]);
					employee.setLeaveTime(times[2]);
					list.add(employee);
					break;
				}
			}

		}
		System.out.println("getAttenceDatas list:" + list.size());
		return list;
	}

	/**
	 * 
	 * 创建表格
	 * 
	 * @param datas
	 *            具体数据
	 * @param contents
	 *            目录名称
	 * @param title
	 *            第一行的标题
	 * @param sheetName
	 *            表名称
	 * @return HssfWorkbook对象
	 */
	private static HSSFWorkbook createBook(List<Employee> datas, String[] contents, String title, String sheetName) {
		System.out.println("=====createBook======");
		List<Employee> employees = getReAttenceAndLackAttence(datas);
		HSSFWorkbook book = new HSSFWorkbook();
		HSSFSheet sheet = book.createSheet(sheetName);
		// 创建通用的表格样式
		HSSFCellStyle commonStyle = createBookStyle(book, HorizontalAlignment.CENTER, VerticalAlignment.CENTER);
		HSSFFont commonFont = createDifferentFont(book, false, HSSFColor.BLACK.index, (short) 12);
		// 创建大标题样式和字体
		HSSFCellStyle titleStyle = createBookStyle(book, HorizontalAlignment.CENTER, VerticalAlignment.CENTER);
		HSSFFont titleFont = createDifferentFont(book, true, HSSFColor.BLACK.index, (short) 16);
		// 创建目录的样式和字体
		HSSFCellStyle contentStyle = createBookStyle(book, HorizontalAlignment.CENTER, VerticalAlignment.CENTER);
		HSSFFont specialFont = createDifferentFont(book, true, HSSFColor.BLACK.index, (short) 12);
		// 创建重复打卡或者漏打卡的样式
		HSSFCellStyle reCountStyle = createBookStyle(book, HorizontalAlignment.CENTER, VerticalAlignment.CENTER);
		HSSFFont reCountFont = createDifferentFont(book, true, HSSFColor.BLUE.index, (short) 12);
		// 周六日打卡
		HSSFCellStyle weekStyle = createBookStyle(book, HorizontalAlignment.CENTER, VerticalAlignment.CENTER);
		HSSFFont weekFont = createDifferentFont(book, true, HSSFColor.RED.index, (short) 12);
		// 说明行的样式
		HSSFCellStyle descStyle = createBookStyle(book, HorizontalAlignment.LEFT, VerticalAlignment.CENTER);
		HSSFFont descFont = createDifferentFont(book, false, HSSFColor.BLACK.index, (short) 12);
		for (int i = 0; i < datas.size() + 3; i++) {
			HSSFRow row = sheet.createRow(i);
			int rowNum = row.getRowNum();
			row.setHeight((short) 1000);
			for (int j = 0; j < contents.length; j++) {
				sheet.setColumnWidth(j, 5000);
				HSSFCell cell = row.createCell(j);
				if (rowNum == 0) {
					CellRangeAddress cra = new CellRangeAddress(0, 0, 0, contents.length - 1);
					sheet.addMergedRegion(cra);
					cell.setCellValue(title);
					titleStyle.setFont(titleFont);
					cell.setCellStyle(titleStyle);
					break;
				} else if (rowNum == 1) {
					if (j == 0) {
						CellRangeAddress cra = new CellRangeAddress(1, 1, 0, contents.length - 1);
						sheet.addMergedRegion(cra);
						cell.setCellValue(StringUtils.EXCEL_DESC);
						descStyle.setFont(descFont);
						cell.setCellStyle(descStyle);
						continue;
					}
					descStyle.setFont(descFont);
					cell.setCellStyle(descStyle);
				} else if (rowNum == 2) {
					cell.setCellValue(contents[j]);
					contentStyle.setFont(specialFont);
					cell.setCellStyle(contentStyle);
				} else {
					Employee employee = datas.get(i - 3);
					if (j == 0) {
						cell.setCellValue(employee.getNo());
					} else if (j == 1) {
						cell.setCellValue(employee.getDeptName());
					} else if (j == 2) {
						cell.setCellValue(employee.getName());
					} else if (j == 3) {
						cell.setCellValue(employee.getWeek());
					} else if (j == 4) {
						cell.setCellValue(employee.getAttenceDate());
					} else if (j == 5) {
						cell.setCellValue(employee.getAttenceTime());
					} else if (j == 6) {
						cell.setCellValue(employee.getFlag());
					} else if (j == 7) {
						cell.setCellValue(employee.getStatus());
					} else if (j == 8) {
						cell.setCellValue(employee.getLeaveTime());
					}
					if (StringUtils.SATURDAY.equals(employee.getWeek())
							|| StringUtils.SUNDAY.equals(employee.getWeek())) {
						weekStyle.setFont(weekFont);
						cell.setCellStyle(weekStyle);
					} else if (employees.contains(employee)) {
						if (j == 7) {
							cell.setCellValue(StringUtils.REPAET_CLOCK);
						}
						reCountStyle.setFont(reCountFont);
						cell.setCellStyle(reCountStyle);
					} else {
						commonStyle.setFont(commonFont);
						cell.setCellStyle(commonStyle);
					}
				}
			}
		}
		return book;
	}

	/**
	 * 创建表格字体
	 * 
	 * @param book
	 *            当前的表
	 * @param blod
	 *            是否加粗
	 * @param index
	 *            颜色的索引值
	 * @param fontSize
	 *            字体大小
	 * @return HSSFFont对象
	 */
	private static HSSFFont createDifferentFont(HSSFWorkbook book, boolean blod, short index, short fontSize) {
		HSSFFont font = book.createFont();
		font.setBold(blod);
		font.setColor(index);
		font.setFontHeightInPoints(fontSize);
		return font;
	}

	/**
	 * 创建表格样式
	 * 
	 * @param book 当前表
	 * @param horizontalAlignment 水平对齐样式
	 * @param verticalAlignment 垂直对齐样式
	 * @return HSSFCellStyle实例
	 */
	private static HSSFCellStyle createBookStyle(HSSFWorkbook book, HorizontalAlignment horizontalAlignment,
			VerticalAlignment verticalAlignment) {
		HSSFCellStyle cellStyle = book.createCellStyle();
		cellStyle.setAlignment(horizontalAlignment);
		cellStyle.setVerticalAlignment(verticalAlignment);
		cellStyle.setBorderBottom(BorderStyle.THIN);
		cellStyle.setBorderLeft(BorderStyle.THIN);
		cellStyle.setBorderTop(BorderStyle.THIN);
		cellStyle.setBorderRight(BorderStyle.THIN);
		cellStyle.setWrapText(true);
		return cellStyle;
	}

	/**
	 * 向磁盘写入表格文件
	 * 
	 * @param book
	 *            要保存的book对象
	 * @param path
	 *            保存的路径
	 */
	private static void writeBook(HSSFWorkbook book, String path) {
		System.out.println("=====writeBook======");
		System.out.println("path:" + path);
		FileOutputStream fos = null;
		try {
			fos = new FileOutputStream(path);
			if (book != null) {
				book.write(fos);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 查询重复打卡和漏打卡的问题。
	 * 
	 * @param employees
	 * @return
	 */
	private static List<Employee> getReAttenceAndLackAttence(List<Employee> employees) {
		List<Employee> employeeList = new ArrayList<Employee>();
		boolean reDateflag = false;// 标记重复打开，true表示重复打卡，false表示不重复打卡
		boolean flag = false;// 标记日期不同，只存在有给日期，如果为true，则日期不同，如果为false，日期相同
		boolean nameFlag = false;
		boolean sameNameFlag = false;
		/**
		 * 漏打卡： 日期相同，但是上下班状态缺失，要么只有下班，要么只有上班
		 * 1、上班或者下班只打了一次，当前对象的日期只存在一次，与其他的比对是是不存在的；
		 * 2、上班或者下班重复打了，当前对象的日期存在多次，但是上下班的状态只有一种，要么只有上班，要么只有下班。
		 */
		for (int i = 0; i < employees.size(); i++) {
			Employee employee = employees.get(i);
			for (int j = i + 1; j < employees.size(); j++) {
				Employee compEmployee = employees.get(j);
				// 如果两个对象的打卡日期不相同，则说明只存在一个打卡状态，如果相同，说明存在多次打卡
				if (employee.getName().equals(compEmployee.getName())) {
					sameNameFlag = true;
					if (employee.getAttenceDate().equals(compEmployee.getAttenceDate())) {
						reDateflag = true;
						// 如果日期相同，上下班标识相同，则重复打卡，如果日期相同，但上下班标识不同，则正常打卡。
						if (employee.getFlag().equals(compEmployee.getFlag())) {
							employeeList.add(compEmployee);
						}
					} else {
						// 上班或下班只打了一次，
						flag = true;
					}
				} else {
					nameFlag = true;
				}
			}
			// 名字只出现一次
			if (nameFlag && !sameNameFlag) {
				employeeList.add(employee);
			}
			// 日期只出现一次，且没有重复
			if (flag && !reDateflag) {
				employeeList.add(employee);
			}
		}
		System.out.println("打卡异常的次数：" + employeeList.size());
		return employeeList;
	}

	/**
	 * 根据考勤记录时间，与标准时间比对，获得迟到早退的时间
	 * 
	 * @param targetTime
	 *            考勤的记录时间，包含了年月日时分秒
	 * @return 数组
	 */
	public static String[] getSeconds(String targetTime) {
		// System.out.println("=====getSeconds======");
		String[] status = new String[3];
		targetTime = targetTime.substring(targetTime.indexOf(":") - 2, targetTime.length());
		// 分割数组
		String[] targets = targetTime.split(":");
		String[] monring = StringUtils.MONRING_TIME.split(":");
		String[] night = StringUtils.NIGHT_TIME.split(":");
		//
		int hours = Integer.parseInt(targets[0]);
		int mins = Integer.parseInt(targets[1]);
		int secodes = Integer.parseInt(targets[2]);
		int hourNum;
		int minsNum;
		int secodesNum;
		if (hours >= 9 && hours < 12) {
			status[0] = StringUtils.WOKING_FIELD;
			if (hours >= 9 | mins >= 0 | secodes > 0) {
				status[1] = StringUtils.LATE_FIELD;
				hourNum = hours - Integer.parseInt(monring[0]);
				minsNum = mins - Integer.parseInt(monring[1]);
				secodesNum = secodes - Integer.parseInt(monring[2]);
				status[2] = hourNum + "时" + minsNum + "分" + secodesNum + "秒";
			} else {
				status[1] = StringUtils.COMMON_FIELD;
				status[2] = StringUtils.COMMON_FIELD;
			}
		} else if (hours < 9) {
			status[0] = StringUtils.WOKING_FIELD;
			status[1] = StringUtils.COMMON_FIELD;
			status[2] = StringUtils.COMMON_FIELD;
		} else {
			status[0] = StringUtils.WOKED_FIELD;
			if (hours < 18) {
				status[1] = StringUtils.LEFT_EARLY;
				if ((hours == 13 && mins <= 30) || hours == 12) {
					hourNum = Integer.parseInt(night[0]) - (hours + 1) - 1;
					minsNum = 30;
					secodesNum = 0;
				} else {
					hourNum = Integer.parseInt(night[0]) - hours - 1;
					minsNum = 60 - mins - 1;
					secodesNum = 60 - secodes;
				}
				status[2] = hourNum + "时" + minsNum + "分" + secodesNum + "秒";
			} else {
				status[1] = StringUtils.COMMON_FIELD;
				status[2] = StringUtils.COMMON_FIELD;
			}
		}
		return status;
	}

	/**
	 * 查询一个字符串是否存在于数组中
	 * 
	 * @param sources
	 *            原始数据
	 * @param targetStr
	 *            需要查询的字段
	 * @return int类型，如果为1，表示存在，则不再循环；如果为0，则表示不存在。
	 */
	private static int queryFromArray(List<Employee> sources, String targetStr) {
		int flag = 0;
		for (Employee employee : sources) {
			if (targetStr.equals(employee.getName())) {
				// 当前字符串等于employee的名称
				flag = 1;
				return flag;
			} else if (targetStr.equals(employee.getDeptName())) {
				// 当前字符串等于employee的部门名称
				flag = 1;
				return flag;
			} else if (employee.getAttenceDate().contains(targetStr)) {
				// employee包含当前的字符串
				flag = 1;
				return flag;
			}
		}
		return flag;

	}

	/**
	 * 根据打卡时间获得星期
	 * 
	 * @param string
	 *            需要转换的日期和时间
	 * @return
	 */
	public static String getweek(String string) {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat weekFormat = new SimpleDateFormat("EEEE");
		String week = null;
		try {
			Date date = format.parse(string);
			week = weekFormat.format(date);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return week;
	}

	/**
	 * 判断name是否为空，或者为默认显示的值
	 * 
	 * @param str
	 *            控件的内容
	 * @param content
	 *            定义的内容，判断控件的内容是否等于其初始值
	 * @return 布尔值，如果为true，则不为空，如果为false，则为空。
	 */
	private static boolean isEmpty(String str, String content) {
		boolean flag = false;
		if (str == null || str.length() < 1 || str.equals(content)) {
			flag = true;
		}
		return flag;
	}

	/**
	 * 获得已经排序好的list集合
	 * 
	 * @param date
	 *            查询的日期
	 * @param queryName
	 *            查询的姓名
	 * @param deptStr
	 *            查询的部门
	 * @param datas
	 *            原始数据
	 * @return list集合，排序好的
	 */
	private static List<Employee> sortList(String date, String queryName, String deptStr, List<Employee> datas) {
		List<Employee> list = queryDateByName(datas, queryName, deptStr, date);
		// 对datas进行排序
		Collections.sort(list, new Comparator<Employee>() {
			@Override
			public int compare(Employee arr1, Employee arr2) {
				int i = Integer.parseInt(arr1.getNo()) - Integer.parseInt(arr2.getNo());
				return i;
			}
		});
		return list;
	}
}
